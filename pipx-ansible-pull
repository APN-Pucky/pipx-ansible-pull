#!/bin/bash

usage() {
  echo "Usage: $0 [-U|--url <URL>] [-d|--directory <DIRECTORY>] [ansible-pull options]"
  exit 1
}


# Check if ANSIBLE_HOME is set, if not, set it to ~/.ansible
: ${ANSIBLE_HOME:=$HOME/.ansible}
hostname_fqdn=$(hostname -f)
# Initialize variables
url=""
directory="$ANSIBLE_HOME/pull/$hostname_fqdn"
checkout=""

# Filter arguments
rest_args=()
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -U|--url)
      if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
        url="$2"
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage
      fi
      ;;
    -d|--directory)
      if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
        directory="$2"
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage
      fi
      ;;
    -C|--checkout)
      if [ -n "$2" ] && [ "${2:0:1}" != "-" ]; then
        checkout="$2"
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        usage
      fi
      ;;
    *)
      rest_args+=("$1")
      shift
      ;;
  esac
done

# Check if URL is set
if [ -z "$url" ]; then
  echo "Error: URL is required"
  usage
fi

# Check if directory is set
if [ -z "$directory" ]; then
  echo "Error: Directory is required"
  usage
fi

# effective git clone, branch checkout 
if command -v ansible-ppull &> /dev/null
then
  if [ -z "$checkout" ]; then
    ansible-pull -U "$url" -d "$directory"
  else
    ansible-pull -U "$url" -d "$directory" -C "$checkout"
  fi
else
  echo "ansible-pull command does not exist. Using git clone instead."
  # Create the directory if it doesn't exist
  mkdir -p "$directory"
  # Clone the repository
  if [ -z "$checkout" ]; then
    git clone "$url" "$directory"
  else
    git clone "$url" "$directory" -b "$checkout"
  fi
  # Navigate to the directory
  cd "$directory"
  # Optionally, pull the latest changes
  git pull
fi

set -euo pipefail # strict bash mode

# Pipx ritual
pipx ensurepath
pipx install ansible --include-deps # pipx needs to create the venv first
pipx runpip ansible freeze > /tmp/uninstall.txt # store what is latest
pipx runpip ansible uninstall -y -r /tmp/uninstall.txt # remove all that
pipx runpip ansible install -r "$directory"/requirements.txt # install ours

# Run ansible-pull with the arguments
ansible-pull -U "$url" -d "$directory" "${rest_args[@]}"

